/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package peppercontroller;

import com.aldebaran.qi.Application;
import com.aldebaran.qi.CallError;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import javax.swing.JOptionPane;
import peppercontroller.util.PepperControl;

/**
 *
 * @author Hank
 */
public class MainFrame extends javax.swing.JFrame {

    static final String NEWLINE = System.getProperty("line.separator");
    private Boolean pressingStatus = false;
    private PepperControl control;
    private String args[];
    private float speedValue, rotateValue;

    /**
     * Creates new form MainFrame
     */
    public MainFrame(String args[]) {
        initComponents();
        init();
        this.args = args;
    }

    private void init() {
        int poX, poY;
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        poX = (screen.width - this.getWidth()) / 2;
        poY = (screen.height - this.getHeight()) / 2;
        setLocation(poX, poY);
        rotateValue = 0.5f;
        speedValue = 0.2f;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusScrollPane = new javax.swing.JScrollPane();
        statusField = new javax.swing.JTextArea();
        clear = new javax.swing.JButton();
        speedSlider = new javax.swing.JSlider();
        fastCheck = new javax.swing.JCheckBox();
        behaviorBox = new javax.swing.JComboBox<>();
        actionButton = new javax.swing.JButton();
        autonomousBox = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        connect = new javax.swing.JMenuItem();
        disconnect = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        about = new javax.swing.JMenu();
        author = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pepper movement controller");

        statusScrollPane.setAutoscrolls(true);
        statusScrollPane.setName(""); // NOI18N

        statusField.setEditable(false);
        statusField.setColumns(20);
        statusField.setLineWrap(true);
        statusField.setRows(5);
        statusField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                statusFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                statusFieldKeyReleased(evt);
            }
        });
        statusScrollPane.setViewportView(statusField);

        clear.setText("Clear");
        clear.setFocusable(false);
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        speedSlider.setMajorTickSpacing(1);
        speedSlider.setMaximum(10);
        speedSlider.setMinimum(1);
        speedSlider.setMinorTickSpacing(1);
        speedSlider.setPaintLabels(true);
        speedSlider.setPaintTicks(true);
        speedSlider.setSnapToTicks(true);
        speedSlider.setToolTipText("");
        speedSlider.setValue(2);
        speedSlider.setFocusable(false);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });

        fastCheck.setText("Rotate Faster");
        fastCheck.setFocusable(false);
        fastCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fastCheckItemStateChanged(evt);
            }
        });

        behaviorBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        behaviorBox.setFocusable(false);

        actionButton.setText("Action");
        actionButton.setFocusable(false);
        actionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedBehavior(evt);
            }
        });

        autonomousBox.setText("Autonomous");

        file.setText("File");

        connect.setText("Connect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });
        file.add(connect);

        disconnect.setText("Disconnect");
        disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectActionPerformed(evt);
            }
        });
        file.add(disconnect);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        file.add(exit);

        menuBar.add(file);

        about.setLabel("about");

        author.setLabel("The Author");
        about.add(author);

        menuBar.add(about);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                    .addComponent(speedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(autonomousBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fastCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(behaviorBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fastCheck)
                    .addComponent(behaviorBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actionButton)
                    .addComponent(autonomousBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clear))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        statusField.setText("");
        System.out.println("Cleared");
        statusField.requestFocus();
    }//GEN-LAST:event_clearActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed

        String ipAddress;
        ipAddress = JOptionPane.showInputDialog(this, "Please enter Pepper's IP address", "IP address input", JOptionPane.OK_CANCEL_OPTION);

        if (ipAddress != null) {
            boolean result = isReachable(ipAddress, 9559, 1000);
            //statusField.append(String.valueOf(result));
            if (result) {
                connectPepper(args, "tcp://" + ipAddress + ":9559");
            } else {
                statusField.append("Host not response, please check your ip address!");
            }
        }
    }//GEN-LAST:event_connectActionPerformed

    private void disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_disconnectActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        if (control != null) {
            try {
                //control.restore();
                control.stopService();
            } catch (CallError | InterruptedException ex) {
                statusField.append("Error has occured");
                System.err.println("Error has occured : \n" + ex);
            }
        }
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void statusFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusFieldKeyPressed

        if (isConnected()) {
            try {
                moveRobot(evt);
            } catch (Exception ex) {
                statusField.append("Robot session error");
                System.err.println(ex);
            }
        } else {
            statusField.append("Pepper not connected");
        }


    }//GEN-LAST:event_statusFieldKeyPressed

    private void statusFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_statusFieldKeyReleased
        if (isConnected()) {
            try {
                // stop move
                control.stopMove();
            } catch (CallError | InterruptedException ex) {
                statusField.append("Error has occured due to stop moving");
            }
        } else {
            displayInfo(evt, "KEY RELEASED: ");
        }
        pressingStatus = false;
    }//GEN-LAST:event_statusFieldKeyReleased

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        speedValue = (float) speedSlider.getValue() / 10;
    }//GEN-LAST:event_speedSliderStateChanged

    private void fastCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fastCheckItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            rotateValue = 1.0f;
        } else {
            rotateValue = 0.5f;
        }
    }//GEN-LAST:event_fastCheckItemStateChanged

    private void proceedBehavior(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedBehavior
        String selectedItem = (String) behaviorBox.getSelectedItem();

        try {
            control.runBehavior(selectedItem);
        } catch (CallError | InterruptedException ex) {
            statusField.append("Can not run behaviour :" + selectedItem);
        }
    }//GEN-LAST:event_proceedBehavior

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame(args).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu about;
    private javax.swing.JButton actionButton;
    private javax.swing.JMenuItem author;
    private javax.swing.JCheckBox autonomousBox;
    private javax.swing.JComboBox<String> behaviorBox;
    private javax.swing.JButton clear;
    private javax.swing.JMenuItem connect;
    private javax.swing.JMenuItem disconnect;
    private javax.swing.JMenuItem exit;
    private javax.swing.JCheckBox fastCheck;
    private javax.swing.JMenu file;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JTextArea statusField;
    private javax.swing.JScrollPane statusScrollPane;
    // End of variables declaration//GEN-END:variables

    private void displayInfo(KeyEvent e, String keyStatus) {
        //is a key typed event.
        String keyString;

        switch (e.getKeyCode()) {
            //up
            case KeyEvent.VK_UP:
            case KeyEvent.VK_W:
                keyString = "UP";
                break;
            //down
            case KeyEvent.VK_DOWN:
            case KeyEvent.VK_S:
                keyString = "DOWN";
                break;
            //left
            case KeyEvent.VK_LEFT:
            case KeyEvent.VK_A:
                keyString = "LEFT";
                break;
            //right
            case KeyEvent.VK_RIGHT:
            case KeyEvent.VK_D:
                keyString = "RIGHT";
                break;
            case KeyEvent.VK_Q: // for rotate left 
                keyString = "Q";
                break;
            case KeyEvent.VK_E: // for rotate right  
                keyString = "E";
                break;
            case KeyEvent.VK_SPACE: // stop  
                keyString = "SPACE";
                break;
            default:
                keyString = "";
                break;
        }

        statusField.append(keyString + NEWLINE);
        statusField.setCaretPosition(statusField.getDocument().getLength());
    }

    private void moveRobot(KeyEvent e) throws Exception {
        //is a key typed event.
        String keyString;
        switch (e.getKeyCode()) {
            //up
            case KeyEvent.VK_UP:
            case KeyEvent.VK_W:
                keyString = "FRONT";
                control.move(speedValue, 0.0f, 0.0f);
                break;
            //down
            case KeyEvent.VK_DOWN:
            case KeyEvent.VK_S:
                keyString = "BACK";
                control.move(-speedValue, 0.0f, 0.0f);
                break;
            //left
            case KeyEvent.VK_LEFT:
            case KeyEvent.VK_A:
                keyString = "LEFT";
                control.move(0.0f, speedValue, 0.0f);
                break;
            //right
            case KeyEvent.VK_RIGHT:
            case KeyEvent.VK_D:
                keyString = "RIGHT";
                control.move(0.0f, -speedValue, 0.0f);
                break;
            case KeyEvent.VK_Q: // for rotate left 
                keyString = "TURN LEFT";
                control.move(0.0f, 0.0f, rotateValue);
                break;
            case KeyEvent.VK_E: // for rotate right  
                keyString = "TURN RIGHT";
                control.move(0.0f, 0.0f, -rotateValue);
                break;
            case KeyEvent.VK_SPACE: // stop  
                keyString = "SPACE";
                control.stopMove();
                break;
            default:
                keyString = "";
                break;
        }

        statusField.append(keyString + NEWLINE);
        statusField.setCaretPosition(statusField.getDocument().getLength());
    }

    private MainFrame() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void connectPepper(String args[], String robotURL) {
        try {
            control = new PepperControl(new Application(args, robotURL));
            statusField.append("Connected to " + robotURL);

            behaviorBox.removeAllItems();
            for (String item : control.getBehaviorList()) {
                behaviorBox.addItem(item);
            }
            this.repaint();
        } catch (Exception ex) {
            statusField.append("Failed to connect pepper, please check your IP address");
        }
    }

    private boolean isConnected() {
        return control != null;
    }

    private static boolean isReachable(String addr, int openPort, int timeOutMillis) {
        // Any Open port on other machine
        // openPort =  22 - ssh, 80 or 443 - webserver, 25 - mailserver etc.
        try {
            try (Socket soc = new Socket()) {
                soc.connect(new InetSocketAddress(addr, openPort), timeOutMillis);
            }
            return true;
        } catch (IOException ex) {
            return false;
        }
    }
}
